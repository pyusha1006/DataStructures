// Java program to Find a Mother Vertex in a Graph
import java.io.*;
import java.util.*;
 
class Graph
{
    private int V;   // No. of vertices
 
    // Array  of lists for Adjacency List Representation
    private LinkedList<Integer> adj[];
 
    // Constructor
    Graph(int v)
    {
        V = v;
        adj = new LinkedList[v];
        for (int i=0; i<v; ++i)
            adj[i] = new LinkedList();
    }
 
    //Function to add an edge into the graph
    void addEdge(int v, int w)
    {
        adj[v].add(w);  // Add w to v's list.
    }
 
    void DFSUtil(int v,boolean visited[])
    {
        visited[v] = true;
 
        Iterator<Integer> i = adj[v].listIterator();
        while (i.hasNext())
        {
            int n = i.next();
            if (!visited[n])
                DFSUtil(n, visited);
        }
    }
 
    int findMother()
    {
        boolean visited[] = new boolean[V];
        for(int i = 0;i<V;i++){
            visited[i]=false;
        }
        
        int a = 0;
        for (int k = 0; k < V; k++)
    {
        if (visited[k] == false)
        {
            DFSUtil(k, visited);
            a = k;
        }
    }
    
    for(int j=0;j<V;j++){
        visited[j]=false;
    }
    DFSUtil(a,visited);
    for (int i=0; i<V; i++)
        if (visited[i] == false)
            return -1;
 
    return a;

    }
 
    public static void main(String args[])
    {
        Graph g = new Graph(7);
 
        g.addEdge(0, 1);
        g.addEdge(0, 2);
        g.addEdge(1, 3);
        g.addEdge(4, 1);
        g.addEdge(6, 4);
        g.addEdge(5, 6);
        g.addEdge(5, 2);
        g.addEdge(6, 0);
 
        System.out.println("A mother vertex is:"+g.findMother());
    }
}
